#!/bin/sh

VERSION='0.1.0'

Color_Red='\033[0;31m'          # Red
Color_Green='\033[0;32m'        # Green
Color_Yellow='\033[0;33m'       # Yellow
Color_Blue='\033[0;34m'         # Blue
Color_Purple='\033[0;35m'       # Purple
Color_Off='\033[0m'             # Reset

msg() {
    printf "%b\n" "$1"
}

info() {
    msg "${Color_Purple}[★] $@${Color_Off}"
}

item() {
    msg "${Color_Blue}[-] $@${Color_Off}"
}

success() {
    msg "${Color_Green}[✔] $@${Color_Off}"
}

warn() {
    msg "${Color_Yellow}🔥 $@${Color_Off}"
}

error() {
    msg "${Color_Red}[✘] $@${Color_Off}"
}

error_exit() {
    msg "${Color_Red}[✘] $@${Color_Off}"
    exit 1
}

sed_in_place() {
    command -v gsed > /dev/null && gsed -i "$1" "$2" && return 0
    command -v sed  > /dev/null && (sed -i "$1" "$2" 2> /dev/null || sed -i "" "$1" "$2") && return 0
    error_exit "please install sed utility.\n"
}

convert_unix_timestamp_to_format_string() {
   date -jf "%s" "$1" "$2" 2> /dev/null ||
   date -d      "@$1" "$2"
}

getvalue() {
    msg "$1" | awk -F= '{print $2}'
}

get_value_from_build_gradle() {
    grep "$1\s*=*\s*[\"|'].*[\"|']" "$GRADLE_APP_MODULE_BUILD_FILE" | sed "s@.*[\"|']\(.*\)[\"|'].*@\1@"
}

#xxx.apk 接上zipaligned变为xxx_zipaligned.apk
#$1为原来的路径
#$2为要追加的字符串
append_filename() {
    printf "%s\n" "$(dirname "$1")/$(basename "$1" .apk)_$2.apk"
}

is_a_valid_apk_file() {
    [ -z "$1" ] && error_exit "must provide a apk file path."
    [ -f "$1" ] || error_exit "$1 file is not exist."
    unzip -t "$1" > /dev/null || error_exit "$1 is not a valid apk file."
}

__read_my_config_file() {
    USER_LEVEL_CONFIG_FILE="$HOME/.androidx"
    [ -f "$USER_LEVEL_CONFIG_FILE" ] && . "$USER_LEVEL_CONFIG_FILE"

    PROJECT_LEVEL_CONFIG_FILE="$PROJECT_DIR/.androidx"
    [ -f "$PROJECT_LEVEL_CONFIG_FILE" ] && . "$PROJECT_LEVEL_CONFIG_FILE"
}

__unzip() {
    if [ "$VERBOSE" = 'true' ] ; then
        unzip $@
    else
        unzip -q $@
    fi
}

#$1是png或者jpg
__convert_to_webp_internal() {
    imageFiles=$(find . -name "*.$1")
    for imageFile in $imageFiles
    do
        if msg "$imageFile" | grep "\.9.png" > /dev/null ; then
            info "$imageFile is 9 png, so not convert"
        else
            name=$(basename "$imageFile")
            if [ "$name" = "ic_launcher.png" ] ; then
                continue
            else
                #cwebp $imageFile -o `dirname $imageFile`/`basename $imageFile .png`.webp &&
                #rm $imageFile
                if [ "$VERBOSE" = 'true' ] ; then
                    cwebp -v     "$imageFile" -o "$imageFile"
                else
                    cwebp -quiet "$imageFile" -o "$imageFile"
                fi
            fi
        fi
    done
}

__convert_to_webp() {
    __convert_to_webp_internal "png" &&
    __convert_to_webp_internal "jpg"
}

__webp() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    OUTPUT_APK_FILE="$(append_filename "$INPUT_APK_FILE" webped)"
    UNZIP_DIR="$WORKING_DIR/webp"
    
    info "__webp start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
    info "      UNZIP_DIR = $UNZIP_DIR"
      
    __unzip "$INPUT_APK_FILE" -d "$UNZIP_DIR" && ( 
        cd "$UNZIP_DIR" &&
        rm -rf META-INF && 
        rm -rf res/layout-watch-v20 && 
        rm -rf res/drawable-watch-v20 && 
        rm -rf res/drawable-ldrtl-mdpi-v17 && 
        rm -rf res/drawable-ldrtl-hdpi-v17 && 
        rm -rf res/drawable-ldrtl-xhdpi-v17 &&
        rm -rf res/drawable-ldrtl-xxhdpi-v17 && 
        rm -rf res/drawable-ldrtl-xxxhdpi-v17 &&
        __convert_to_webp &&
        7za a -tzip -mx9 "$OUTPUT_APK_FILE" .
    )
    
    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__webp success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__webp failed.\n"
    fi
}

__redex() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    OUTPUT_APK_FILE=$(append_filename "$INPUT_APK_FILE" redexed)
    
    info "__redex start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
    
    redex "$INPUT_APK_FILE" -o "$OUTPUT_APK_FILE"
    
    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__redex success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__redex failed.\n"
    fi
}

__resguard() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    OUTPUT_APK_FILE="$(append_filename "$INPUT_APK_FILE" resguard)"
    
    info "__resguard start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
     
    andresguard "$INPUT_APK_FILE" \
        -config "$RESGUARD_CONFIG_FILE" \
        -out "$WORKING_DIR/resguard" \
        -finalApkPath "$OUTPUT_APK_FILE" \
        -signatureType v2 \
        -signature "$KEY_STORE_FILE_PATH" "$KEY_STORE_PASSWORD" "$KEY_STORE_KEY_PASSWORD" "$KEY_STORE_KEY_ALIAS"

    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__resguard success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__resguard failed.\n"
    fi
}

__jiagu() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    info "__jiagu start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
     
    #使用360账户登录
    outputMessage=$(360jiagubao -login "$QIHU360_USERNAME" "$QIHU360_PASSWORD" | tail -n 1)
    if msg "$outputMessage" | grep "succe" ; then
        success "360jiagubao $outputMessage"
    else
        info "QIHU360_PASSWORD = $QIHU360_USERNAME"
        info "QIHU360_PASSWORD = $QIHU360_PASSWORD"
        error_exit "360jiagubao $outputMessage"
    fi
    
    outputMessage=""
    
    #导入签名信息
    outputMessage=$(360jiagubao -importsign "$KEY_STORE_FILE_PATH" "$KEY_STORE_PASSWORD" "$KEY_STORE_KEY_ALIAS" "$KEY_STORE_KEY_PASSWORD" | tail -n 1)
    if msg "$outputMessage" | grep "succe" ; then
        success "360jiagubao $outputMessage"
    else
        error_exit "360jiagubao $outputMessage"
    fi
    
    #加固，并进行v1签名
    360jiagubao -jiagu "$INPUT_APK_FILE" "$WORKING_DIR" -autosign || error_exit "__jiagu failed!"
    
    OUTPUT_APK_FILE=$(find "$WORKING_DIR" -name "*_jiagu_sign.apk" | head -n 1)
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
    
    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__jiagu success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__jiagu failed.\n"
    fi
}

# 删除apk中的签名信息
# $1 是apk的路径
__sign_v1_remove() {
    is_a_valid_apk_file "$1"
    
    aapt r "$1" META-INF/CERT.SF
    aapt r "$1" META-INF/CERT.RSA
    aapt r "$1" META-INF/MANIFEST.MF
}

__sign_v1() {
    is_a_valid_apk_file "$INPUT_APK_FILE"

    OUTPUT_APK_FILE="$(append_filename "$INPUT_APK_FILE" v1signed)"
    
    info "__sign_v1 start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"

    __sign_v1_remove "$INPUT_APK_FILE"
    
    if [ "$VERBOSE" = 'true' ] ; then
        jarsigner -verbose -keystore "$KEY_STORE_FILE_PATH" -storepass "$KEY_STORE_PASSWORD" -digestalg SHA-256 -sigalg SHA256withRSA -sigfile CERT -signedjar "$OUTPUT_APK_FILE" "$INPUT_APK_FILE" "$KEY_STORE_KEY_ALIAS"
    else
        jarsigner          -keystore "$KEY_STORE_FILE_PATH" -storepass "$KEY_STORE_PASSWORD" -digestalg SHA-256 -sigalg SHA256withRSA -sigfile CERT -signedjar "$OUTPUT_APK_FILE" "$INPUT_APK_FILE" "$KEY_STORE_KEY_ALIAS"
    fi

    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__sign_v1 success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__sign_v1 failed.\n"
    fi
}

__sign_v2() {
    is_a_valid_apk_file "$INPUT_APK_FILE"

    OUTPUT_APK_FILE="$(append_filename "$INPUT_APK_FILE" v2signed)"
    
    info "__sign_v2 start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
     
    apksigner sign --ks "$KEY_STORE_FILE_PATH" --ks-pass pass:"$KEY_STORE_PASSWORD" --ks-key-alias "$KEY_STORE_KEY_ALIAS" --key-pass pass:"$KEY_STORE_PASSWORD" --out "$OUTPUT_APK_FILE" "$INPUT_APK_FILE" 
    
    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__sign_v2 success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__sign_v2 failed.\n"
    fi
}

__sign_v2_verify() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    info "__sign_v2_verify start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    
    apksigner verify -verbose "$INPUT_APK_FILE"

    if [ $? -eq 0 ] ; then
        success "__sign_v2_verify success.\n"
    else
        error_exit "__sign_v2_verify failed.\n"
    fi
}

__zipalign() {
    OUTPUT_APK_FILE="$(append_filename "$INPUT_APK_FILE" aligned)"
    
    info "__zipalign start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
    
    if [ "$VERBOSE" = 'true' ] ; then
        zipalign -v -f 4 "$INPUT_APK_FILE" "$OUTPUT_APK_FILE"
    else
        zipalign    -f 4 "$INPUT_APK_FILE" "$OUTPUT_APK_FILE"
    fi
    
    if [ -f "$OUTPUT_APK_FILE" ] ; then
        success "__zipalign success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__zipalign failed.\n"
    fi
}

__copy_to_working_dir() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    WORKING_DIR=$(mktemp -d)
    OUTPUT_APK_FILE="${WORKING_DIR}/input.apk"
    
    info "__copy_to_working_dir start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
    info "WORKING_DIR     = $WORKING_DIR"
    
    cp "$INPUT_APK_FILE" "$OUTPUT_APK_FILE"
    
    if [ $? -eq 0 ] ; then
        success "__copy_to_working_dir success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__copy_to_working_dir failed.\n"
    fi
}

__copy_to_output_dir() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    OUTPUT_APK_FILE="${OUTPUT_DIR}/${APP_NAME}_${APP_VERSION_NAME}_${TIMESTAMP_FORM}_${ENVIRONMENT}.apk"
    
    info "__copy_to_output_dir start-->"
    info " INPUT_APK_FILE = $INPUT_APK_FILE"
    info "OUTPUT_APK_FILE = $OUTPUT_APK_FILE"
    info "OUTPUT_DIR      = $OUTPUT_DIR"
    
    cp "$INPUT_APK_FILE" "$OUTPUT_APK_FILE"
    
    if [ $? -eq 0 ] ; then
        success "__copy_to_output_dir success.\n"
        INPUT_APK_FILE="$OUTPUT_APK_FILE"
    else
        error_exit "__copy_to_output_dir failed.\n"
    fi
}

__walle() {
    is_a_valid_apk_file "$INPUT_APK_FILE"
    
    CHANNELS_OUT_DIR="$(basename $INPUT_APK_FILE .apk)"
    
    info "__walle start-->"
    info " INPUT_APK_FILE      = $INPUT_APK_FILE"
    info "CHANNELS_OUT_DIR     = $OUTPUT_DIR/$CHANNELS_OUT_DIR"
    info "CHANNELS_CONFIG_FILE = $CHANNELS_CONFIG_FILE"
    
    walle batch -f "$CHANNELS_CONFIG_FILE" "$INPUT_APK_FILE" "$OUTPUT_DIR/$CHANNELS_OUT_DIR"
    
    if [ $? -eq 0 ] ; then
        success "__walle success.\n"
    else
        error_exit "__walle failed.\n"
    fi
}

__zip() {
    OUTPUT_ZIP_FILE="$OUTPUT_DIR/${CHANNELS_OUT_DIR}.zip"

    info "__zip start-->"
    
    cd "$OUTPUT_DIR" &&
    zip "$OUTPUT_ZIP_FILE" ${CHANNELS_OUT_DIR}/* &&
    
    if [ $? -eq 0 ] ; then
        info "OUTPUT_ZIP_FILE = $(du -h "$OUTPUT_ZIP_FILE" | awk '{print $2"   "$1}')"
        success "__zip success.\n"
    else
        error_exit "__zip failed.\n"
    fi
}

__install() {
    info "Installing $INPUT_APK_FILE ..." &&
    adb kill-server &&
    adb install -r -t "$INPUT_APK_FILE"
}

__unset() {
    unset KEY_STORE_FILE_PATH
    unset KEY_STORE_PASSWORD
    unset KEY_STORE_KEY_PASSWORD
    unset KEY_STORE_KEY_ALIAS

    unset QIHU360_USERNAME
    unset QIHU360_PASSWORD
    
    unset RESGUARD_CONFIG_FILE
    
    unset CHANNELS_CONFIG_FILE
    unset CHANNELS_OUT_DIR

    unset APP_NAME
    unset APP_VERSION_NAME
    unset APP_PACKAGE_NAME
   
    unset PROJECT_DIR
    unset WORKING_DIR
    unset OUTPUT_DIR 
    
    unset ENVIRONMENT
        
    unset INPUT_APK_FILE
    unset OUTPUT_APK_FILE

    unset isWebp
    unset isReDex
    unset isResGuard
    unset isJiaGu
    unset isGenChannels
    unset isZipChannels
    unset needInstall

    unset VERBOSE
}

__check_JAVA_HOME() {
    [ -z "$JAVA_HOME" ] && error_exit "JAVA_HOME environment variable is not set."
    [ -d "$JAVA_HOME" ] || error_exit "JAVA_HOME=$JAVA_HOME directory is not exist."
    [ -d "$JAVA_HOME/bin" ] || error_exit "$JAVA_HOME/bin directory is not exist."
    export PATH="$JAVA_HOME/bin:$PATH"
}

__check_ANDROID_HOME() {
    [ -z "$ANDROID_HOME" ] && error_exit "ANDROID_HOME environment variable is not set."
    [ -d "$ANDROID_HOME" ] || error_exit "ANDROID_HOME=$ANDROID_HOME directory is not exist."
    
    ANDROID_PLATFORMS_DIR="$ANDROID_HOME/platforms"
    [ -d "$ANDROID_PLATFORMS_DIR" ] || error_exit "$ANDROID_PLATFORMS_DIR directory is not exist."
    
    ANDROID_PLATFORM_TOOLS_DIR="$ANDROID_HOME/platform-tools"
    [ -d "$ANDROID_PLATFORM_TOOLS_DIR" ] || error_exit "$ANDROID_PLATFORM_TOOLS_DIR directory is not exist."
    export PATH="$ANDROID_PLATFORM_TOOLS_DIR:$PATH"
    
    ANDROID_BUILD_TOOLS_DIR="$ANDROID_HOME/build-tools"
    [ -d "$ANDROID_BUILD_TOOLS_DIR" ] || error_exit "$ANDROID_BUILD_TOOLS_DIR directory is not exist."
     
    for item in $(cd "$ANDROID_BUILD_TOOLS_DIR"; ls | sort --version-sort --reverse)
    do
        [ -d "$ANDROID_BUILD_TOOLS_DIR/$item" ] && {
            export PATH="$ANDROID_BUILD_TOOLS_DIR:$PATH"
            ANDROID_BUILD_TOOLS_VERSION="$item"
            break
        }
    done
}

__check_PROJECT_DIR() {
    [ -d "$PROJECT_DIR" ] || error_exit "PROJECT_DIR=$PROJECT_DIR directory is not exist."
    info "PROJECT_DIR   = $PROJECT_DIR\n"
    
    cd "$PROJECT_DIR"
         
    [ -z "$GRADLEW" ] && GRADLEW="$PROJECT_DIR/gradlew"
    [ -f "$GRADLEW" ] || error_exit "$GRADLEW is not exist."
    [ -x "$GRADLEW" ] || error_exit "$GRADLEW is not execuable."

    find_out_app_module

    [ -z "$GRADLE_SETTINGS_FILE" ] && GRADLE_SETTINGS_FILE="$PROJECT_DIR/settings.gradle.kts"
    [ -f "$GRADLE_SETTINGS_FILE" ] || GRADLE_SETTINGS_FILE="$PROJECT_DIR/settings.gradle"
    [ -f "$GRADLE_SETTINGS_FILE" ] || error_exit "$PROJECT_DIR/settings.gradle or $PROJECT_DIR/settings.gradle.kts is not exist."
    [ -f "$PROJECT_DIR/gradle.properties" ] || error_exit "$PROJECT_DIR/gradle.properties is not exist."
    [ -d "$PROJECT_DIR/gradle" ]            || error_exit "$PROJECT_DIR/gradle directory is not exist."
}

find_out_app_module() {
    for item in *
    do
        [ -d "$item" ] && {
            temp="$PROJECT_DIR/$item/build.gradle"
            [ -f "$temp" ] && grep "[\"|']com.android.application[\"|']" "$temp" > /dev/null && {
                GRADLE_APP_MODULE_NAME="$item"
                GRADLE_APP_MODULE_BUILD_FILE="$temp"
                GRADLE_APP_MODULE_BUILD_FILE_TYPE='groovy'
            } && break
            
            temp="$PROJECT_DIR/$item/build.gradle.kts"
            [ -f "$temp" ] && grep "[\"|']com.android.application[\"|']" "$temp" > /dev/null && {
                GRADLE_APP_MODULE_NAME="$item"
                GRADLE_APP_MODULE_BUILD_FILE="$temp"
                GRADLE_APP_MODULE_BUILD_FILE_TYPE='kotlin'
            } && break
        }
    done
    [ -f "$GRADLE_APP_MODULE_BUILD_FILE" ] || error_exit "$PROJECT_DIR/app/build.gradle or $PROJECT_DIR/app/build.gradle.kts is not exist."
}

__check_OUTPUT_DIR() {
    [ -z "$OUTPUT_DIR" ] && {
        if [ -n "$PROJECT_DIR" ] ; then
            OUTPUT_DIR="$PROJECT_DIR"
            warn "missing --output-dir=DIR argument. so we use the default value [PROJECT_DIR=$PROJECT_DIR]\n"
        else
            OUTPUT_DIR="$PWD"
            warn "missing --output-dir=DIR argument. so we use the default value [PWD=$PWD]\n"
        fi
    }
    info "OUTPUT_DIR    = $OUTPUT_DIR\n"
}

__check_APP_NAME() {
    [ -z "$APP_NAME" ] && {
        if [ -n "$PROJECT_DIR" ] ; then
            APP_NAME="$(basename "$PROJECT_DIR")"
            warn "missing --app-name argument. so we use the default value [basename $PROJECT_DIR]\n"
        else
            APP_NAME="$(basename "$OUTPUT_DIR")"
            warn "missing --app-name argument. so we use the default value [basename $OUTPUT_DIR]\n"
        fi
    }
    info "APP_NAME         = $APP_NAME"
}

__check_APP_VERSION_NAME() {
    if [ -n "$PROJECT_DIR" ] ; then
        [ -z "$APP_VERSION_NAME" ] && APP_VERSION_NAME=$(get_value_from_build_gradle 'versionName')
        [ -z "$APP_VERSION_NAME" ] && error_exit "can't read versionName from $GRADLE_APP_MODULE_BUILD_FILE."
    else
        APP_VERSION_NAME=$(aapt d badging "$INPUT_APK_FILE" | grep 'versionName' | awk 'BEGIN{RS=" "} /versionName/{print}' | sed "s/versionName=\'\(.*\)\'/\1/")
    fi
    info "APP_VERSION_NAME = $APP_VERSION_NAME"
}

__check_APP_PACKAGE_NAME() {
    if [ -n "$PROJECT_DIR" ] ; then
        [ -z "$APP_PACKAGE_NAME" ] && APP_PACKAGE_NAME=$(get_value_from_build_gradle 'applicationId')
        [ -z "$APP_PACKAGE_NAME" ] && error_exit "can't read applicationId from $GRADLE_APP_MODULE_BUILD_FILE."
    else
        APP_PACKAGE_NAME=$(aapt d badging "$INPUT_APK_FILE" | grep "package: name=" |  awk 'BEGIN{RS=" "} /^name/{print}' | sed "s/name=\'\(.*\)\'/\1/")
    fi
    info "APP_PACKAGE_NAME = $APP_PACKAGE_NAME\n"
}

__check_KEY_STORE() {
    if [ -n "$PROJECT_DIR" ] ; then
        [ -z "$KEY_STORE_FILE_PATH" ] && {
            KEY_STORE_FILE_PATH=$(grep "storeFile\s*=*\s*file\s*(\s*[\"|'].*[\"|']\s*)" "$GRADLE_APP_MODULE_BUILD_FILE" | sed "s@.*[\"|']\(.*\)[\"|'].*@\1@")
            KEY_STORE_FILE_PATH="$PROJECT_DIR/$GRADLE_APP_MODULE_NAME/$KEY_STORE_FILE_PATH"
        }
        [ -z "$KEY_STORE_PASSWORD" ]  && KEY_STORE_PASSWORD=$(get_value_from_build_gradle 'storePassword')
        [ -z "$KEY_STORE_KEY_ALIAS" ] && KEY_STORE_KEY_ALIAS=$(get_value_from_build_gradle 'keyAlias')
        [ -z "$KEY_STORE_KEY_PASSWORD" ] && KEY_STORE_KEY_PASSWORD=$(get_value_from_build_gradle 'keyPassword')
    else 
        [ -z "$KEY_STORE_FILE_PATH" ]    && error_exit "missing --keystore-file=FILE argument."
        [ -z "$KEY_STORE_PASSWORD" ]     && error_exit "missing --keystore-password=VALUE argument."
        [ -z "$KEY_STORE_KEY_ALIAS" ]    && error_exit "missing --keystore-key-alias=VALUE argument."
        [ -z "$KEY_STORE_KEY_PASSWORD" ] && error_exit "missing --keystore-key-password=VALUE argument."
    fi
    
    [ -f "$KEY_STORE_FILE_PATH" ] || error_exit "KEY_STORE_FILE_PATH = ${KEY_STORE_FILE_PATH} is not a file or is not exist."
    
    info "KEY_STORE_FILE_PATH    = $KEY_STORE_FILE_PATH"
    info "KEY_STORE_PASSWORD     = $KEY_STORE_PASSWORD"
    info "KEY_STORE_KEY_ALIAS    = $KEY_STORE_KEY_ALIAS"
    info "KEY_STORE_KEY_PASSWORD = $KEY_STORE_KEY_PASSWORD\n"
}

__check_RESGUARD_CONFIG_FILE() {
    [ -z "$RESGUARD_CONFIG_FILE" ] && [ -n "$PROJECT_DIR" ] && RESGUARD_CONFIG_FILE="$PROJECT_DIR/AndResGuard-config.xml"
    [ -z "$RESGUARD_CONFIG_FILE" ] && RESGUARD_CONFIG_FILE="$PWD/AndResGuard-config.xml"
    [ -f "$RESGUARD_CONFIG_FILE" ] || {
        cat > "$RESGUARD_CONFIG_FILE" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<resproguard>
  <issue id="property">
    <seventzip value="true"/>
    <metaname value="META-INF"/>
    <keeproot value="false"/>
    <mergeDuplicatedRes value="true"/>
  </issue>

  <issue id="whitelist" isactive="true">
    <path value="${APP_PACKAGE_NAME}.R.mipmap.ic_launcher"/>
    <path value="${APP_PACKAGE_NAME}.R.mipmap.service*"/>
    <path value="${APP_PACKAGE_NAME}.R.string.com.crashlytics.*"/>
    <path value="${APP_PACKAGE_NAME}.R.string.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.layout.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.drawable.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.anim.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.color.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.style.*UM*"/>
    <path value="${APP_PACKAGE_NAME}.R.style.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.id.umeng*"/>
    <path value="${APP_PACKAGE_NAME}.R.string.UM*"/>
    <path value="${APP_PACKAGE_NAME}.R.string.tb_*"/>
    <path value="${APP_PACKAGE_NAME}.R.layout.tb_*"/>
    <path value="${APP_PACKAGE_NAME}.R.drawable.tb_*"/>
    <path value="${APP_PACKAGE_NAME}.R.color.tb_*"/>
  </issue>

  <issue id="keepmapping" isactive="false">
    <path value="{your_mapping_path}"/>
  </issue>

  <issue id="compress" isactive="true">
    <path value="*.png"/>
    <path value="*.jpg"/>
    <path value="*.jpeg"/>
    <path value="*.gif"/>
    <path value="resources.arsc"/>
  </issue>

  <issue id="sign" isactive="true">
    <path value="$KEY_STORE_FILE_PATH"/>
    <storepass value="$KEY_STORE_PASSWORD"/>
    <keypass value="$KEY_STORE_KEY_PASSWORD"/>
    <alias value="$KEY_STORE_KEY_ALIAS"/>
  </issue>

</resproguard>
EOF
        error_exit "$RESGUARD_CONFIG_FILE is not exist. so we have generated it for you, modify it yourself, then try again. see details: https://github.com/shwenzhang/AndResGuard/blob/master/doc/how_to_work.md#how-to-write-configxml-file"
    }
    
    info "RESGUARD_CONFIG_FILE = $RESGUARD_CONFIG_FILE\n"

    [ -z "$RESGUARD_CONFIG_FILE" ] && error_exit "RESGUARD_CONFIG_FILE is not set. you can config it in \$HOME/.androidx or use --resguard-config-file=FILE to set it, then try again."
    [ -f "$RESGUARD_CONFIG_FILE" ] || error_exit "RESGUARD_CONFIG_FILE = $RESGUARD_CONFIG_FILE is not a file or is not exist."
}

__check_QIHU360_account() {
    __read_my_config_file
    [ -z "$QIHU360_USERNAME" ] && [ -z "$QIHU360_PASSWORD" ] && error_exit "QIHU360_USERNAME and QIHU360_PASSWORD are not set. you can config it in \$HOME/.androidx, then try again."
    [ -z "$QIHU360_USERNAME" ] && error_exit "QIHU360_USERNAME is not set. you can config it in \$HOME/.androidx, then try again."
    [ -z "$QIHU360_PASSWORD" ] && error_exit "QIHU360_PASSWORD is not set. you can config it in \$HOME/.androidx, then try again."
}

__check_CHANNELS_CONFIG_FILE() {
    [ -z "$CHANNELS_CONFIG_FILE" ] && {
        if [ -n "$PROJECT_DIR" ] ; then
            CHANNELS_CONFIG_FILE="$PROJECT_DIR/channels-config.txt"
            [ -f "$CHANNELS_CONFIG_FILE" ] || error_exit "CHANNELS_CONFIG_FILE is not set. you can create a file which name is channels-config.txt in \$PROJECT_DIR or use --channels-config-file=FILE argument to specify it, then try again."
        elif [ -n "$INPUT_APK_FILE" ] ; then
            CHANNELS_CONFIG_FILE="$PWD/channels-config.txt"
            [ -f "$CHANNELS_CONFIG_FILE" ] || error_exit "CHANNELS_CONFIG_FILE is not set. you can create a file which name os channels-config.txt in \$PWD or use --channels-config-file=FILE to specify it, then try again."
        fi
    }
    
    [ -f "$CHANNELS_CONFIG_FILE" ] || error_exit "CHANNELS_CONFIG_FILE = $CHANNELS_CONFIG_FILE is not a file or is not exist."
    info "CHANNELS_CONFIG_FILE = $CHANNELS_CONFIG_FILE\n"
}

__check_ENVIRONMENT() {
    [ -z "${ENVIRONMENT}" ] && {
        ENVIRONMENT=debug
        warn "missing --environment=VALUE argument. so we use the default value [debug].\n"
    }
    
    info "ENVIRONMENT   = $ENVIRONMENT\n"
}

# 修改AndroidManifest.xml里面的android:debuggable开关
__modify_android_manifest_xml_debuggable() {
    if [ "$ENVIRONMENT" = "release" ] ; then
        debuggable=false
    else
        debuggable=true
    fi
    
    sed_in_place "s|android:debuggable=\"$.*\"|android:debuggable=\"${debuggable}\"|g" "$PROJECT_DIR/$GRADLE_APP_MODULE_NAME/src/main/AndroidManifest.xml"
}


__build_android_project() {
    if [ -f "$PROJECT_DIR/local.properties" ] ; then
        sed_in_place "s|sdk\.dir=.*|sdk.dir=${ANDROID_HOME}|g" "$PROJECT_DIR/local.properties"
    fi
    
    # 修改版本号（版本号使用十位的Unix时间戳，它精确到秒，而且它不会超过Java中的int类型的最大范围（2147483647），示例：1516856238）
    sed_in_place "s|versionCode.*=.*|versionCode = $TIMESTAMP_UNIX|g" "$GRADLE_APP_MODULE_BUILD_FILE"
     
    #删除掉构建目录
    rm -rf "$(find . -name "build")"
    
    #清除掉上次编译的其他临时数据
    "$GRADLEW" clean
    
    #开始构建
    "$GRADLEW" assemble$(msg "$ENVIRONMENT" | awk '{print(toupper(substr($0, 1, 1))""substr($0, 2))}') || error_exit "build failed."
     
    INPUT_APK_FILE="$PROJECT_DIR/$GRADLE_APP_MODULE_NAME/build/outputs/apk/${ENVIRONMENT}/${GRADLE_APP_MODULE_NAME}-${ENVIRONMENT}.apk"
}

__build() {
    command -v gsed  > /dev/null || 
    command -v sed   > /dev/null || error_exit "sed is not installed."
    command -v grep  > /dev/null || error_exit "grep is not installed."
    command -v unzip > /dev/null || error_exit "unzip is not installed."

    OS="$(uname -s)"
    TIMESTAMP_UNIX="$(date +%s)"
    TIMESTAMP_FORM=$(convert_unix_timestamp_to_format_string "$TIMESTAMP_UNIX" "+%Y%m%d%H%M%S")
    
    while [ -n "$1" ]
    do
        case $1 in
            --webp)
                isWebp=true
                command -v cwebp > /dev/null || error_exit "libwebp is not installed."
                command -v 7za   > /dev/null || error_exit "p7zip is not installed."
                ;;
            --resguard)
                isResGuard=true
                command -v 7za > /dev/null || error_exit "p7zip is not installed."
                command -v andresguard > /dev/null || error_exit "andresguard-cli is not installed." 
                ;;
            --redex)
                command -v redex > /dev/null || error_exit "redex is not installed."
                isReDex=true
                ;;
            --jiagu)
                command -v 360jiagubao > /dev/null || error_exit "qihu360jiagubao is not installed."
                isJiaGu=true
                ;;
            --channels-gen)
                command -v walle > /dev/null || error_exit "walle-cli is not installed."
                isGenChannels=true
                ;;
            --channels-zip)
                command -v zip > /dev/null || error_exit "zip is not installed."
                isZipChannels=true
                ;;
            --install)
                needInstall=true
                ;;
            -v|--verbose)
                VERBOSE=true
                ;;
            --app-name=*)
                APP_NAME=$(getvalue "$1")
                ;;
            --environment=*)
                ENVIRONMENT=$(getvalue "$1")
                ;;
            --input-apk-file=*)
                INPUT_APK_FILE=$(getvalue "$1")
                [ -z "$INPUT_APK_FILE" ] && shift && continue 
                case "$INPUT_APK_FILE" in
                    /*) ;;
                    \~|\~/) INPUT_APK_FILE="$HOME" ;;
                    \~/*)   INPUT_APK_FILE="${HOME}$(msg "$INPUT_APK_FILE" | awk '{print(substr($0, 2))}')" ;;
                    .|./)   INPUT_APK_FILE="$PWD" ;;
                    *)      INPUT_APK_FILE="$PWD/$INPUT_APK_FILE" ;;
                esac
                ;;
            --channels-config-file=*)
                CHANNELS_CONFIG_FILE=$(getvalue "$1")
                [ -z "$CHANNELS_CONFIG_FILE" ] && error_exit "--channels-config-file argument's value must be not empty."
                case "$CHANNELS_CONFIG_FILE" in
                    /*) ;;
                    \~|\~/) CHANNELS_CONFIG_FILE="$HOME" ;;
                    \~/*)   CHANNELS_CONFIG_FILE="${HOME}$(msg "$CHANNELS_CONFIG_FILE" | awk '{print(substr($0, 2))}')" ;;
                    .|./)   CHANNELS_CONFIG_FILE="$PWD" ;;
                    *)      CHANNELS_CONFIG_FILE="$PWD/$CHANNELS_CONFIG_FILE" ;;
                esac
                ;;
            --resguard-config-file=*)
                RESGUARD_CONFIG_FILE=$(getvalue "$1")
                [ -z "$RESGUARD_CONFIG_FILE" ] && error_exit "--resguard-config-file argument's value must be not empty."
                case "$RESGUARD_CONFIG_FILE" in
                    /*) ;;
                    \~|\~/) RESGUARD_CONFIG_FILE="$HOME" ;;
                    \~/*)   RESGUARD_CONFIG_FILE="${HOME}$(msg "$RESGUARD_CONFIG_FILE" | awk '{print(substr($0, 2))}')" ;;
                    .|./)   RESGUARD_CONFIG_FILE="$PWD" ;;
                    *)      RESGUARD_CONFIG_FILE="$PWD/$RESGUARD_CONFIG_FILE" ;;
                esac
                ;;
            --keystore-file=*)
                KEY_STORE_FILE_PATH=$(getvalue "$1")
                [ -z "$KEY_STORE_FILE_PATH" ] && error_exit "--keystore-file argument's value must be not empty."
                case "$KEY_STORE_FILE_PATH" in
                    /*) ;;
                    \~|\~/) KEY_STORE_FILE_PATH="$HOME" ;;
                    \~/*)   KEY_STORE_FILE_PATH="${HOME}$(msg "$KEY_STORE_FILE_PATH" | awk '{print(substr($0, 2))}')" ;;
                    .|./)   KEY_STORE_FILE_PATH="$PWD" ;;
                    *)      KEY_STORE_FILE_PATH="$PWD/$KEY_STORE_FILE_PATH" ;;
                esac
                ;;
            --keystore-password=*)
                KEY_STORE_PASSWORD=$(getvalue "$1")
                [ -z "$KEY_STORE_PASSWORD" ] && error_exit "--keystore-password argument's value must be not empty."
                ;;
            --keystore-key-alias=*)
                KEY_STORE_KEY_ALIAS=$(getvalue "$1")
                [ -z "$KEY_STORE_KEY_ALIAS" ] && error_exit "--keystore-key-alias argument's value must be not empty."
                ;;
            --keystore-key-password=*)
                KEY_STORE_KEY_PASSWORD=$(getvalue "$1")
                [ -z "$KEY_STORE_KEY_PASSWORD" ] && error_exit "--keystore-key-password argument's value must be not empty."
                ;;
            --project-dir=*)
                PROJECT_DIR=$(getvalue "$1")
                [ -z "$PROJECT_DIR" ] && shift && continue 
                case "$PROJECT_DIR" in
                    /*) ;;
                    \~|\~/) PROJECT_DIR="$HOME" ;;
                    \~/*)   PROJECT_DIR="${HOME}$(msg "$PROJECT_DIR" | awk '{print(substr($0, 2))}')" ;;
                    .|./)   PROJECT_DIR="$PWD" ;;
                    *)      PROJECT_DIR="$PWD/$PROJECT_DIR" ;;
                esac
                ;;
            --output-dir=*)
                OUTPUT_DIR=$(getvalue "$1")
                [ -z "$OUTPUT_DIR" ] && error_exit "--output-dir argument's value must be not empty."
                case "$OUTPUT_DIR" in
                    /*);;
                    \~|\~/) OUTPUT_DIR="$HOME" ;;
                    \~/*)   OUTPUT_DIR="${HOME}$(msg "$OUTPUT_DIR" | awk '{print(substr($0, 2))}')" ;;
                    .|./)   OUTPUT_DIR="$PWD" ;;
                    *)      OUTPUT_DIR="$PWD/$OUTPUT_DIR" ;;
                esac
                ;;
            *)  error_exit "$1 : unrecognized argument."
        esac
        shift
    done
    
    info "--webp        = $isWebp"
    info "--resguard    = $isResGuard"
    info "--redex       = $isReDex"
    info "--jiagu       = $isJiaGu"
    info "--channels-gen= $isGenChannels"
    info "--channels-zip= $isZipChannels"
    info "--install     = $needInstall\n"
    info "OS            = $OS\n"
    info "TIMESTAMP_UNIX= $TIMESTAMP_UNIX"
    info "TIMESTAMP_FORM= $TIMESTAMP_FORM\n"
     
    __check_JAVA_HOME
    __check_ANDROID_HOME
    
    if [ -z "$INPUT_APK_FILE" ] && [ -z "$PROJECT_DIR" ] ; then
        PROJECT_DIR="$PWD"
        warn "missing --input-apk-file=FILE and --project-dir=DIR argument. so we use the default value [PROJECT_DIR=PWD=$PWD]\n"
    fi
    
    if [ -n "$PROJECT_DIR" ] ; then
        __check_PROJECT_DIR
    else
        info "INPUT_APK_FILE= $INPUT_APK_FILE\n"
        is_a_valid_apk_file "$INPUT_APK_FILE"
    fi
    
    [ "$isWebp" = "true" -o "$isReDex" = "true" -o "$isResGuard" = "true" -o "$isJiaGu" = "true" ] && __check_KEY_STORE
    
    __check_ENVIRONMENT
    __check_OUTPUT_DIR
    __check_APP_NAME
    __check_APP_VERSION_NAME
    __check_APP_PACKAGE_NAME    
    
    [ "$isResGuard"    = "true" ] && __check_RESGUARD_CONFIG_FILE
    [ "$isGenChannels" = "true" ] && __check_CHANNELS_CONFIG_FILE
    [ "$isJiaGu"       = "true" ] && __check_QIHU360_account
   
    [ -n "$PROJECT_DIR" ] && __build_android_project
     
    __copy_to_working_dir
    
    [ "$isWebp"     = "true" ] && __webp  && __sign_v1
    [ "$isReDex"    = "true" ] && __redex && __sign_v1
    [ "$isResGuard" = "true" ] && __resguard
    [ "$isJiaGu"    = "true" ] && __jiagu && __zipalign && __sign_v2 && __sign_v2_verify
    
    __copy_to_output_dir
    
    [ "$isGenChannels" = "true" ] && __walle && [ "$isZipChannels" = "true" ] && __zip
    [ "$needInstall"   = 'true' ] && __install
    
    msg ""
    success "All Done."
}

#显示KeyStore中的内容
show_keystore() {
    __unset

    case $1 in
        --project-dir=*)
            PROJECT_DIR=$(getvalue "$1")
            [ -z "$PROJECT_DIR" ] || 
            case "$PROJECT_DIR" in
                /*) ;;
                \~|\~/) PROJECT_DIR="$HOME" ;;
                \~/*)   PROJECT_DIR="${HOME}$(msg "$PROJECT_DIR" | awk '{print(substr($0, 2))}')" ;;
                .|./)   PROJECT_DIR="$PWD" ;;
                *)      PROJECT_DIR="$PWD/$PROJECT_DIR" ;;
            esac
    esac
    
    [ -z "$PROJECT_DIR" ] && {
        PROJECT_DIR="$PWD"
        warn "missing --project-dir=DIR argument. so we use the default value [PWD=$PWD].\n"
    }

    __check_JAVA_HOME
    __check_PROJECT_DIR
    __check_KEY_STORE
    keytool -list -v -keystore "$KEY_STORE_FILE_PATH" -storepass "$KEY_STORE_PASSWORD" -alias "$KEY_STORE_KEY_ALIAS"
}

show_version_of_a_apk_file() {
    __unset

    case $1 in
        --input-apk-file=*)
            INPUT_APK_FILE=$(getvalue "$1")
            [ -z "$INPUT_APK_FILE" ] || 
            case "$INPUT_APK_FILE" in
                /*) ;;
                \~|\~/) INPUT_APK_FILE="$HOME" ;;
                \~/*)   INPUT_APK_FILE="${HOME}$(msg "$INPUT_APK_FILE" | awk '{print(substr($0, 2))}')" ;;
                .|./)   INPUT_APK_FILE="$PWD" ;;
                *)      INPUT_APK_FILE="$PWD/$INPUT_APK_FILE" ;;
            esac
    esac

    [ -z "$INPUT_APK_FILE" ] && error_exit "missing --input-apk-file=FILE argument."
    
    info "INPUT_APK_FILE = $INPUT_APK_FILE\n"

    is_a_valid_apk_file "$INPUT_APK_FILE"
    __check_JAVA_HOME
    __check_ANDROID_HOME
    aapt dump badging "$INPUT_APK_FILE" | grep "version"
}

# 显示帮助
help() {
	cat <<EOF
androidx -h                             --show help info
androidx --help                         --show help info
androidx help                           --show help info

androidx -V                             --show version
androidx --version                      --show version
androidx version                        --show version

androidx show keystore --project-dir=DIR           --show your keystore's content of the project.

androidx show version --input-apk-file=FILE        --print the apk's versionCode and versionName

androidx build [ARGUMENT]...
    ARGUMENT: 
        --input-apk-file=FILE    --set the input apk file path. if this argument is specified, --project-dir=DIR argument can not be specified.
        --project-dir=DIR        --set the android project directory. if this argument is specified, --input-apk-file=FILE argument can not be specified.
        
        --webp            --convert images to webp, default false.
        --resguard        --guard the res, default false.
        --redex           --rebuild the dex to optimize, default false.
        --jiagu           --jiagu with 360jiagubao, default false.
        --channels-gen    --generate channels files.
        --channels-zip    --zip channels files.
        --install         --install the final apk on connected device.
        
        --channels-config-file=FILE      --set the channels config file path
        --resguard-config-file=FILE      --set the resguard config file path
                                        
        --keystore-file=FILE             --set the keystore file path.
        --keystore-password=VALUE        --set the password of the keystore file.
        --keystore-key-alias=VALUE       --set the key alias.
        --keystore-key-password=VALUE    --set the password of the key alias.
        
        --output-dir=DIR        --set the output dir, if this argument is not specified, the project directory or current directory is used.
        --app-name=VALUE        --set the app name, if this argument is not specified, the name of output directory is used.
        --environment=VALUE     --debug or release, if this argument is not specified, debug is used.
        --verbose | -v          --verbose output log.
EOF
    if [ -z "$1" ] ; then
        exit
    else
        exit "$1"
    fi
}

main() {
    case $1 in
        -h|--help|help)
            help
            ;;
        -V|--version|version)
            msg "$VERSION"
            ;;
        build)
            shift
            __build "$@"
            ;;
        show)
            case $2 in
                keystore)
                    shift 2
                    show_keystore "$@"
                    ;;
                version)
                    shift 2
                    show_version_of_a_apk_file "$@"
                    ;;
                *)  help 1
            esac
            ;;
        *)  help 1
    esac
}

main "$@"
